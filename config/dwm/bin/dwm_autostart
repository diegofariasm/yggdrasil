#!/usr/bin/env cached-nix-shell
#! nix-shell -p ruby -i "ruby -S" --quiet

def load_wallpaper(wallpaper)
  system("#{wallpaper}")
end

def load_xresources(xresources_file)
  # Load xresources
  system("xrdb -merge #{xresources_file}")
  # Relaod xresources on dwm
 # system('dwmc xrdb')
end

home_dir = ENV['HOME']
runtime_dir = ENV['XDG_RUNTIME_DIR']
lockfile = "#{runtime_dir}/dwm_autostart.lock"|| "/run/user/#{Process.uid}/dwm_autostart.lock"
config_dir = ENV['XDG_CONFIG_HOME'] || "#{home_dir}/.config"

xresources_file = "#{config_dir}/dwm/xresources"
wallpaper = "#{home_dir}/.fehbg"

# Open the lockfile with exclusive write access
lockfile_fd = File.open(lockfile, File::RDWR | File::CREAT, 0o644)
unless lockfile_fd.flock(File::LOCK_EX | File::LOCK_NB)
  # Lock is held by another process, check if it's still running
  old_pid = lockfile_fd.read.chomp.to_i
  if Process.kill(0, old_pid)
    puts 'Lockfile exists, exiting...'
    exit 1
  else
    # Stale lock, remove it and acquire the lock
    lockfile_fd.flock(File::LOCK_UN)
    lockfile_fd.close
    File.unlink(lockfile)
    lockfile_fd = File.open(lockfile, File::RDWR | File::CREAT, 0o644)
    lockfile_fd.flock(File::LOCK_EX)
  end
end
#
# Load the things
load_wallpaper(wallpaper)
load_xresources(xresources_file)

lockfile_fd.flock(File::LOCK_UN)
lockfile_fd.close
File.unlink(lockfile)
