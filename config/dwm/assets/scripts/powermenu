#!/usr/bin/env cached-nix-shell
#! nix-shell -p ruby -i "ruby -S" --quiet

require "socket"
require "English"

def treat_rofi_output(rofi_output)
  rofi_output = rofi_output.gsub("\n", "")

  return rofi_output
end

def system_uptime
  uptime_seconds = File.read("/proc/uptime").split(" ")[0].to_i
  seconds = uptime_seconds % 60
  minutes = (uptime_seconds / 60) % 60
  hours = (uptime_seconds / 3600) % 24
  days = uptime_seconds / 86400

  return "#{days} days, #{hours} hours, #{minutes} minutes, #{seconds} seconds"
end

def show_options(options, runner, uptime, hostname)
  options = options.join("\n")
  chosen_option = `echo -e '#{options}' | #{runner} -p '#{hostname}' -mesg 'Uptime: #{uptime}'`
  return treat_rofi_output(chosen_option)
end

def get_confirmation(rofi_runner, hostname)
  do_confirm = `echo -e "Yes\nNo" | #{rofi_runner} -p '#{hostname}' -mesg 'Do you want to continue?'`

  return treat_rofi_output(do_confirm.downcase)
end

# Get used variables
hostname = Socket.gethostname
uptime = system_uptime()

lock_app = "slock"
rofi_runner = "rofi -dmenu -i -theme ~/.config/dwm/config/rofi/powermenu.rasi"

# The commands shown on the prompt
available_options = [
  " Shutdown",
  " Reboot",
  " Lock",
  "鈴 Suspend",
  "󰗽 Logout",
  " Hibernate",
]

# Show options and get the chosen one
chosen_command = show_options(available_options, rofi_runner, uptime, hostname)

# Only ask for confirmation if the user didn't cancel the prompt
if $CHILD_STATUS.success?
  do_continue = get_confirmation(rofi_runner, hostname)
end

if do_continue == "yes"
  # TODO Find better way of doing this
  case chosen_command
  when available_options[0]
    system("systemctl poweroff")
  when available_options[1]
    system("systemctl reboot")
  when available_options[2]
    system(lock_app)
  when available_options[3]
    system("systemctl suspend")
  when available_options[4]
    system("dwmc quit")
  when available_options[5]
    system("systemctl hibernate")
  end
else
  puts "Operation canceled."
end
